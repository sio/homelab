---

- name: use bridge interface instead of the physical one
  replace:
    path: '{{ kvm_bridge_config_file }}'
    regexp: '\b{{ ansible_default_ipv4.interface }}\b'
    replace: '{{ kvm_bridge_interface }}'
    backup: yes
  when: ansible_default_ipv4.interface != kvm_bridge_interface
  notify: reboot

- name: check if bridge is enabled on startup
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    regexp: 'auto.*\b{{ kvm_bridge_interface }}\b'
    state: absent
  check_mode: yes
  register: kvm_bridge_auto
  changed_when: false

- name: enable bridge interface on startup
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    line: 'auto {{ kvm_bridge_interface }}'
  when: not kvm_bridge_auto.found
  notify: reboot

- name: check if bridge entry exists in config file
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    regexp: 'iface\s*\b{{ kvm_bridge_interface }}\b'
    state: absent
  check_mode: yes
  register: kvm_bridge_definition
  changed_when: false

- name: add bridge entry to config file
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    line: 'iface {{ kvm_bridge_interface }} inet dhcp'
  when: not kvm_bridge_definition.found
  notify: reboot

- name: add physical interface to bridge
  interfaces_file:
    dest: '{{ kvm_bridge_config_file }}'
    iface: '{{ kvm_bridge_interface }}'
    option: bridge_ports
    value: '{{ ansible_default_ipv4.interface }}'
    backup: yes
  when: ansible_default_ipv4.interface != kvm_bridge_interface
  notify: reboot

- name: specify bridge interface options
  interfaces_file:
    dest: '{{ kvm_bridge_config_file }}'
    iface: '{{ kvm_bridge_interface }}'
    option: '{{ item.key }}'
    value: '{{ item.value }}'
    backup: yes
  loop: '{{ kvm_bridge_options|dict2items }}'
  notify: reboot

- name: read /etc/network/interfaces
  slurp:
    src: /etc/network/interfaces
  register: interfaces
- name: show /etc/network/interfaces
  debug:
    msg: '{{ (interfaces["content"]|b64decode).splitlines() }}'

