---

- include: assert.yml

- name: update networking facts
  setup:
    filter: ansible_default_ipv4

- name: update package lists
  apt:
    cache_valid_time: 36000  # 10 hours
  changed_when: false
  when: ansible_pkg_mgr == 'apt'

- name: install bridge utils
  package:
    name:
      - bridge-utils
      - ifupdown
    state: present

- name: enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: make sure interfaces file exists
  copy:
    content: ''
    force: no  # do not overwrite existing file
    dest: '{{ kvm_bridge_config_file }}'
    mode: '0644'

- name: check if bridge entry was previously created
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    regexp: 'auto.*\b{{ kvm_bridge_interface }}\b'
    state: absent
  check_mode: yes
  register: kvm_bridge_created
  changed_when: false

- name: use bridge interface instead of the physical one
  replace:
    path: '{{ kvm_bridge_config_file }}'
    regexp: '\b{{ ansible_default_ipv4.interface }}\b'
    replace: '{{ kvm_bridge_interface }}'
    backup: yes
  when: (ansible_default_ipv4.interface != kvm_bridge_interface) and not kvm_bridge_created.found
  notify: restart bridge interface

- name: check if bridge is enabled on startup
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    regexp: 'auto.*\b{{ kvm_bridge_interface }}\b'
    state: absent
  check_mode: yes
  register: kvm_bridge_auto
  changed_when: false

- name: enable bridge interface on startup
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    line: 'auto {{ kvm_bridge_interface }}'
  when: not kvm_bridge_auto.found
  notify: restart bridge interface

- name: check if bridge entry exists in config file
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    regexp: 'iface\s*\b{{ kvm_bridge_interface }}\b'
    state: absent
  check_mode: yes
  register: kvm_bridge_definition
  changed_when: false

- name: add bridge entry to config file
  lineinfile:
    path: '{{ kvm_bridge_config_file }}'
    regexp: 'iface\s*\b{{ kvm_bridge_interface }}\b'
    line: 'iface {{ kvm_bridge_interface }} {{ kvm_bridge_fallback_iface }}'
  when: not kvm_bridge_definition.found or kvm_bridge_fallback_force
  notify: restart bridge interface

- name: add physical interface to bridge
  interfaces_file:
    dest: '{{ kvm_bridge_config_file }}'
    iface: '{{ kvm_bridge_interface }}'
    option: '{{ item.key }}'
    value: '{{ item.value }}'
    backup: yes
  with_dict:
    bridge_ports: '{{ ansible_default_ipv4.interface }}'
    pre-up: 'ip addr flush {{ ansible_default_ipv4.interface }}'
  when: (ansible_default_ipv4.interface != kvm_bridge_interface) and not kvm_bridge_created.found
  notify: restart bridge interface

- name: specify bridge interface options
  interfaces_file:
    dest: '{{ kvm_bridge_config_file }}'
    iface: '{{ kvm_bridge_interface }}'
    option: '{{ item.key }}'
    value: '{{ item.value }}'
    backup: yes
  loop: '{{ kvm_bridge_options|dict2items }}'
  when: (ansible_default_ipv4.interface != kvm_bridge_interface) and not kvm_bridge_created.found
  notify: restart bridge interface

- name: install ufw
  package:
    name: ufw
    state: present
  when: firewall_auto_config|default(True)

- name: allow forwarding via bridge interface in firewall
  lineinfile:
    path: /etc/ufw/before.rules
    line: '-I FORWARD -p all -i {{ kvm_bridge_interface }} -j ACCEPT'
    insertbefore: COMMIT
    state: present
    mode: '0640'
    backup: yes
  when: firewall_auto_config|default(True)
  notify: reload firewall

- name: read /etc/network/interfaces
  slurp:
    src: /etc/network/interfaces
  register: interfaces
- name: show /etc/network/interfaces
  debug:
    msg: '{{ (interfaces["content"]|b64decode).splitlines() }}'

- meta: flush_handlers  # reconfigure network immediately before applying further roles  # noqa unnamed-task
