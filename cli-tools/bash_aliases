# Invoke by adding `source bash_aliases` to ~/.bashrc


# Improved file listing
alias la='ls -A'
alias ll='ls -l'
alias ls='ls -F -h --color=auto --show-control-chars'

# Colored grep whenever possible
alias grep='grep --color=auto'

# Strip comments from file and print it to stdout
alias bones="grep -Ev '^\s*#'"

# Pretty print files to stdout, add filename headers
alias show="tail -v -n+1"

# Show file listing when changing current directory
_cd() {
    local CMD="builtin cd"
    local DEST
    if [ "$#" -eq 0 ]
    then
        set -- "$HOME"  # set default argument value for function
    else
        if [ -f "$@" ]  # if target is a file instead of directory, cd its parent dir
        then
            DEST=$(dirname "$@")
            set -- "$DEST"
        fi
    fi
    $CMD "$@" && ls
}
alias cd=_cd
complete -d cd  # autocomplete only directories
complete -d _cd

# Pretty diff like `git diff`
_diff() {
    command diff --color=always "$@" | less -rXF
}
alias diff=_diff

# Make directory and cd into it
mkcd() {
    [ ! -d "$1" ] && mkdir -p "$1"
    cd "$1"
}

# Touch file and create required parent directories
# https://stackoverflow.com/a/19288855/3275560
mktouch() {
    for f in "$@"; do
        mkdir -p -- "$(dirname -- "$f")"
        touch -- "$f"
    done
}

# Run the same git subcommand in all git repos down the tree from current
# directory
gitall() {
    local DIR
    local FIRST=1
    local COMMAND

    if [[ -z "$@" ]]
    then
        COMMAND="status"  # default subcommand when invoked without arguments
    else
        COMMAND="$@"
    fi

    find -type d -name .git -print0 2>/dev/null | while read -d $'\0' DIR
    do
        if [[ "$FIRST" -eq 0 ]]
        then
            echo -ne "\n\n"
        else
            FIRST=0
        fi
        command ls --color=auto -d "${DIR::(-4)}"
        git -C "$DIR/.." $COMMAND
    done
}

# Set terminal title from shell
# https://stackoverflow.com/a/1687708
title() {
    echo -ne '\033k'"$@"'\033\\'
    echo -ne '\033]2;'"$@"'\007'
    echo ''
}

# Cross-platform file opener
start() {
    local CMD
    local OPENERS

    OPENERS=(
        'xdg-open'    # linux
        'start'       # windows
    )
    for CMD in "${OPENERS[@]}"
    do
        if $(which "$CMD" >/dev/null 2>&1)
        then
            command "$CMD" "$@"
            break
        fi
    done
}
