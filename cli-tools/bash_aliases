# Invoke by adding `source bash_aliases` to ~/.bashrc


# Improved file listing
alias la='ls -A'
alias ll='ls -l'
alias ls='ls -F -h --color=auto --show-control-chars'

# Colored grep whenever possible
alias grep='grep --color=auto'

# Strip comments from file and print it to stdout
alias bones="grep -Ev '^\s*#|^\s*$'"

# Pretty print files to stdout, add filename headers
alias show="tail -v -n+0"

# Show file listing when changing current directory
_cd() {
    local CMD="builtin cd"
    local DEST
    if [ "$#" -eq 0 ]
    then
        set -- "$HOME"  # set default argument value for function
    else
        if [ -f "$@" ]  # if target is a file instead of directory, cd its parent dir
        then
            DEST=$(dirname "$@")
            set -- "$DEST"
        fi
    fi
    $CMD "$@" && ls
}
alias cd=_cd

# Pretty diff like `git diff`
_diff() {
    command diff --color=always "$@" | less -rXF
}
alias diff=_diff

# Make directory and cd into it
mkcd() {
    [ ! -d "$1" ] && mkdir -p "$1"
    cd "$1"
}

# Touch file and create required parent directories
# https://stackoverflow.com/a/19288855/3275560
mktouch() {
    local f
    for f in "$@"; do
        mkdir -p -- "$(dirname -- "$f")"
        touch -- "$f"
    done
}

# Manipulate multiple git repos
gitall() {
    if [ "_$1" == "_clone" ]
    then
        _gitallclone "${@:2}"
    else
        _gitall "$@"
    fi
}
_gitall() {
    # Run the same git subcommand in all git repos down the tree from current
    # directory

    local DIR
    local FIRST=1

    if [[ -z "$@" ]]
    then
        set -- "status"  # default subcommand when invoked without arguments
    fi

    find -type d -name .git -print0 2>/dev/null | while read -d $'\0' DIR
    do
        if [[ "$FIRST" -eq 0 ]]
        then
            echo -ne "\n\n"
        else
            FIRST=0
        fi
        command ls --color=auto -d "${DIR::(-4)}"
        git -C "$DIR/.." "$@"
    done
}
_gitallclone() {
    # Clone multiple git repositories (primarily for backup and archiving
    # purposes)
    #
    # Files with lists of URLs have to be supplied as arguments. Each list is
    # cloned to a corresponding directory.
    local FILE LIST DIR URL
    for FILE in "${@}"
    do
        echo -e "\n---\n\nSTART CLONING REPOS FROM LIST: $FILE\n"
        LIST=$(basename "$FILE")
        DIR="${LIST%.*}"  # without extension

        grep -Ev '^\s*#|^\s*$' "$FILE" | while read URL
        do
            [ -d "$DIR" ] || mkdir "$DIR"
            pushd "$DIR" > /dev/null
            git clone "$URL" || true
            echo
            popd > /dev/null
        done
        echo -e "FINISHED CLONING REPOS FROM LIST: $FILE"
    done
}

# Set terminal title from shell
# https://stackoverflow.com/a/1687708
title() {
    echo -ne '\033k'"$@"'\033\\'
    echo -ne '\033]2;'"$@"'\007'
    echo ''
}

# Cross-platform file opener
start() {
    local TARGET
    for TARGET in "${@}"
    do
        case "$OSTYPE" in
            msys*)
                # Windows doesn't like slashes in path, we work around that by
                # changing into the directory first and opening the file from
                # within.
                pushd "$(dirname "$TARGET")" >/dev/null
                command start "$(basename "$TARGET")"
                popd >/dev/null
                ;;
            *)
                xdg-open "$TARGET"
                ;;
        esac
    done
}

# Do not clutter asciicasts with nesting levels
alias asciinema='_NESTED_LEVEL=0 asciinema'
