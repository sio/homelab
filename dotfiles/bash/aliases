#
# Invoke by adding `source aliases` to ~/.bashrc
#


# Improved file listing
alias ls='LC_COLLATE=C ls -F -h \
                          -v \
                          --color=auto \
                          --group-directories-first \
                          --show-control-chars'  # also applies to later aliases
alias la='ls -A'
alias ll='ls -l'


# Colored grep whenever possible
alias grep='grep --color=auto'


# Strip comments from file and print it to stdout
alias bones="grep -Ev '^\s*#|^\s*$'"


# Pretty print files to stdout, add filename headers
alias show="tail -v -n+0"


# Enable 256 color palette in Tmux
alias tmux="TERM=screen-256color tmux"


# Show file listing when changing current directory
_cd_with_listing() {
    local CMD="builtin cd"
    local DEST
    if [[ "$1" == "--" ]]
    then
        shift
    fi
    if [ "$#" -eq 0 ]
    then
        set -- "$HOME"  # set default argument value for function
    else
        if [ -f "$@" ]  # if target is a file instead of directory, cd its parent dir
        then
            DEST=$(dirname "$@")
            set -- "$DEST"
        fi
    fi
    $CMD -- "$@" && ls
}
alias cd=_cd_with_listing
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
pushd() {
    builtin pushd "$@" && ls
}
popd() {
    builtin popd "$@" && ls
}


# Pretty diff like `git diff`
_diff_pretty() {
    command diff -ruN --color=always "$@" | less -rXF
}
alias diff=_diff_pretty


# Make directory and cd into it
mkcd() {
    [ ! -d "$1" ] && mkdir -p -- "$1"
    cd -- "$1"
}


# Touch file and create required parent directories
# https://stackoverflow.com/a/19288855/3275560
mktouch() {
    local f
    for f in "$@"; do
        mkdir -p -- "$(dirname -- "$f")"
        touch -- "$f"
    done
}


# Manipulate multiple git repos
gitall() {
    case "$1" in
    clone)
        _gitallclone "${@:2}"
        ;;
    *)
        _gitall "$@"
        ;;
    esac
}
_gitall() {
    # Run the same git subcommand in all git repos down the tree from current
    # directory

    local DIR
    local FIRST=1

    if [[ -z "$@" ]]
    then
        set -- "status" "-sb" # default subcommand when invoked without arguments
    fi

    find -L -type d -name .git -print0 2>/dev/null | while read -d $'\0' DIR
    do
        if [[ "$FIRST" -eq 0 ]]
        then
            echo -ne "\n\n"
        else
            FIRST=0
        fi
        DIR="${DIR::(-4)}"
        command ls --color=auto -d "$DIR"
        case "$1" in
        checkout-default-branch)
            local remote
            remote=${2:-origin}
            local branch
            branch=$(git -C "$DIR" symbolic-ref "refs/remotes/$remote/HEAD")
            branch="${branch#refs/remotes/}"
            test -n "$branch" || return "$?"
            if git -C "$DIR" rev-parse --verify --quiet "${branch#$remote/}" >/dev/null
            then
                git -C "$DIR" checkout "${branch#$remote/}"
            else
                git -C "$DIR" checkout --track "${branch}"
            fi || return "$?"
            git -C "$DIR" branch
            ;;
        *)
            git -C "$DIR" "$@"
            ;;
        esac
    done
}
_gitallclone() {
    # Clone multiple git repositories (primarily for backup and archiving
    # purposes)
    #
    # Files with lists of URLs have to be supplied as arguments. Each list is
    # cloned to a corresponding directory.
    local FILE LIST DIR URL
    for FILE in "${@}"
    do
        echo -e "\n---\n\nSTART CLONING REPOS FROM LIST: $FILE\n"
        LIST=$(basename "$FILE")
        DIR="${LIST%.*}"  # without extension

        grep -Ev '^\s*#|^\s*$' "$FILE" | while read URL
        do
            [ -d "$DIR" ] || mkdir "$DIR"
            pushd "$DIR" > /dev/null
            git clone "$URL" || true
            echo
            popd > /dev/null
        done
        echo -e "FINISHED CLONING REPOS FROM LIST: $FILE"
    done
}


# Set terminal title from shell
# https://stackoverflow.com/a/1687708
title() {
    echo -ne '\033k'"$@"'\033\\'
    echo -ne '\033]2;'"$@"'\007'
    echo ''
}


# Cross-platform file opener
start() {
    local TARGET
    for TARGET in "${@}"
    do
        case "$OSTYPE" in
            msys*)
                # Windows doesn't like slashes in path, we work around that by
                # changing into the directory first and opening the file from
                # within.
                pushd "$(dirname "$TARGET")" >/dev/null
                command start "$(basename "$TARGET")"
                popd >/dev/null
                ;;
            *)
                xdg-open "$TARGET"
                ;;
        esac
    done
}


# Cross-platform clipboard
clip() {
    local clipboard=""
    which clip  &>/dev/null && clipboard="command clip"
    which xclip &>/dev/null && clipboard="xclip -selection clipboard"
    [[ -z "$clipboard" ]] && { echo No clipboard manager detected >&2; return 1; }

    $clipboard
}


# Do not clutter asciicasts with nesting levels
alias asciinema='_NESTED_LEVEL=0 asciinema'


# Tree implementation (for Msys on Windows and any OS that's missing it)
#
# Only -a and -d keys are supported. Shortcuts (-ad, -da) are not supported
tree() {
    if which tree &>/dev/null
    then
        command tree "$@"
    else
        local arg args search

        arg=""
        args=()
        search=( ! -path \*/\.\* )  # array of extra arguments for `find`

        for arg in "$@"  # this loop may clear default search options
        do
            if [[ "$arg" == "-a" ]]
            then
                search=()
            else
                args+=("$arg")
            fi
        done

        arg=""
        for arg in "${args[@]}"  # this loop only adds search options
        do
            if [[ "$arg" == "-d" ]]
            then
                search+=( -type d )
                arg=""
            fi
        done

        [[ ! -z "$arg" ]] && pushd "$arg" >/dev/null  # use last argument as directory name
        find ./ "${search[@]}" -print \
            | sed -e 's;[^/]*/;`----;g;s;`*----`;  ;g;s; ----; `----;g;s;\(`----*\)\([^-]\);\1 \2;g' \
            | tail -n+2
        [[ ! -z "$arg" ]] && popd >/dev/null
    fi
    return 0
}


# Seamless integration with per-app Python virtual environments
_app_venv_aliases() {
    local storage="$HOME/bin/app.venv"
    local app
    local venv
    for venv in "$storage"/*/bin
    do
        app="${venv::-4}"  # Remove bin suffix
        app="${app##*/}"   # Dirname from path
        if [[ -s "$storage/$app/bin/$app" ]]
        then
            alias "$app"="$storage/$app/bin/$app"  # Unix-like systems
        elif [[ -s "$storage/$app/Scripts/$app.exe" ]]
        then
            alias "$app"="$storage/$app/Scripts/$app.exe"  # Windows
        fi
    done
}
_app_venv_aliases


# Use tabs in vim by default
alias vim='vim -p'


# Shell commands popularity stats
cli-stats() {
    local output_len="$1"
    [[ -z "$output_len" ]] && output_len=10
    local hist_len
    hist_len=$(wc -l "$HISTFILE"|cut -d\  -f1)
    echo -e "TOP $output_len FREQUENTLY USED COMMANDS\n(out of $hist_len history entries)"
    sed 's:|: :g' "$HISTFILE"|awk '{print $1}'|sort|uniq -c|sort -rn|head -n "$output_len"
}


# Expand tabs to 4 spaces in all files with given extensions
retab() {
    local extension
    local filename
    local tempfile=$(mktemp '.retab_XXXXXX')
    for extension
    do
        echo "Expanding tabs and removing trailing whitespace in $extension files:"
        find . \
            -type f \
            -iname '*.'"$extension" \
            -print0 | \
        while read -d $'\0' filename
        do
            expand -i -t 4 "$filename" > "$tempfile" && mv "$tempfile" "$filename"
            sed -i 's/[[:blank:]]*$//' "$filename"
            echo "  $filename"
        done
    done
    rm "$tempfile" 2>/dev/null || true
}


# Patient ssh for reboots <https://old.reddit.com/r/linuxadmin/comments/o2rw19/w/h27y2pd/>
#   ConnectTimeout=1800 didn't work for some reason
ssh-wait() {
    until ssh "$@"
    do
        sleep 1
    done
}


# Limit key lifetime in ssh-agent to 12 hours by default
alias ssh-add='ssh-add -t 12h'


# Set git-identity in mailmap/git-shortlog format:
#   $ git-identity "Vitaly Potyarkin <sio.wtf@gmail.com>"
#
# https://szymonkrajewski.pl/avoid-using-global-git-identity
git-identity() {
    local fullid
    fullid="$@"
    [[ -z "$fullid" ]] && fullid=$(_git-identity-auto)

    local name
    name="${fullid% <*}"

    local email
    email="${fullid##* <}"
    email="${email%%>*}"

    if [[ -z "$name" || -z "$email" || $fullid != *'<'*'>'* ]]
    then
        echo "Invalid identity string: $fullid" >&2
        return 1
    fi

    set -x
    git config --local user.name "$name"
    git config --local user.email "$email"
    { set +x; } 2>/dev/null
}
_git-identity-auto() {
    local options
    readarray -t options < <(
        git shortlog -sne \
        | head -n10 \
        | awk '{ $1 = ""; print substr($0,2) }'
    )
    if [[ "${#options[@]}" == 0 ]]
    then
        return
    fi
    local result position i
    while [[ -z "$result" ]]
    do
        printf "\n" >&2
        for i in $(seq ${#options[@]})
        do
            printf "%2d: %s\n" "$i" "${options[i-1]}" >&2
        done
        read -p $'\n'"Select identity from the list above [1]: " position
        [[ -z "$position" ]] && position=1
        if ((position-1 < 0)); then continue; fi
        result="${options[position-1]}"
    done
    echo "$result"
}

# Record terminal output to log file
record() {
    local output
    output="$1.script"
    local timing
    timing="$1.time"
    [[ -z "$1" ]] && {
        echo "Destination file not specified" >&2
        return 1
    }
    [[ -f "$output" ]] && {
        echo "Destination file exists: $output" >&2
        return 1
    }
    script --timing="$timing" --append --flush "$output"
}

# Show command when using watchexec
run() {
    local bold="$(tput bold)"
    local color="$(tput setaf 6)"
    local normal="$(tput sgr0)"
    local cleanup="                  "
    watchexec \
        --shell="$SHELL" \
        --debounce 500 \
        --ignore .git \
        --ignore '*.pyc' \
        --ignore '*.pyc.*' \
        --ignore '__debug*' \
        --ignore index \
        --ignore index.lock \
        $WATCHEXEC_ARG \
        -- \
        "echo -e \"${cleanup}${color}${bold}\n$ $@${normal}\"; $@ && echo -ne \"${color}OK${normal}\\r\""
}

# Make PDF scans smaller
pdf-compress() {
    local input output rc
    rc=0
    for input in "$@"
    do
        output="${input%.*}-small.${input##*.}"
        printf "Compressing $input... "
        if magick \
            -density 200 \
            "$input" \
            -posterize 3 \
            -compress zip \
            -quality 98 \
            "$output"
        then
            printf "done\n"
        else
            printf "error\n"
            rc=1
        fi
    done
    return $rc
}

# Split PDF to n-page chunks
pdf-chunk() {
    local size="$1"
    shift
    local input output rc
    rc=0
    for input in "$@"
    do
        printf "Splitting $input into $size-page chunks... "
        local total=$(gs \
            --permit-file-read="$input" \
            -q \
            -dNODISPLAY \
            -c "($input) (r) file runpdfbegin pdfpagecount = quit" \
            -f "$input")
        local chunk=0
        while [[ $((chunk*size+1)) -le $total ]]
        do
            output="${input%.*}-$((chunk+1)).${input##*.}"
            if gs \
                -dNOPAUSE \
                -dQUIET \
                -dBATCH \
                -sOutputFile="$output" \
                -dFirstPage="$((chunk*size+1))" \
                -dLastPage="$(((chunk+1)*size))" \
                -sDEVICE=pdfwrite \
                "$input"
            then
                chunk="$((chunk+1))"
                printf "$chunk... "
            else
                rc=1
                break
            fi
        done
        printf "\n"
    done
    return $rc
}

# Join multiple PDF files together
pdf-join() {
    local dest
    dest="$1"
    [[ -n "$dest" ]] || {
        echo "Destination path not specified"
        return 1
    }
    [[ -f "$dest" ]] && {
        echo "Destination file already exists: $dest"
        return 1
    }
    shift
    [[ -n "$@" ]] || {
        echo "Source file(s) not specified"
        return 1
    }
    gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE="$dest" -dBATCH "$@"
}

# Execute command for all files with a given name in directory tree,
# stop at first error
forall() {
    local filename="$1"
    local action="$2"
    if [[ -z "$filename" || -z "$action" ]]
    then
        echo -e "usage: forall FILENAME COMMAND\n\nExecute command in all subdirectories containing named file" >&2
        return 1
    fi
    local bold="$(tput bold)"
    local color="$(tput setaf 6)"
    local normal="$(tput sgr0)"
    find \
        -name "$filename" \
        -printf "\n${bold}%h\n${color}$ $2${normal}  # %f\n" \
        ! -execdir $2 \; \
        -exec false {} + \
        -quit
}

# Gerrit SSH CLI
#
# Simple `alias gerrit='ssh -p $port $server gerrit'` can not handle
# whitespace in argument values and requires annoying '"double quoting"'
gerrit() {
    if [[ -z "$GERRIT_ENDPOINT" ]]
    then
        _gerrit_connect "$@"
        return "$?"
    fi
    local server="${GERRIT_ENDPOINT%%:*}"
    local port="${GERRIT_ENDPOINT##*:}"
    ssh -p "$port" "$server" gerrit $(printf "%q " "$@")
}
_gerrit_connect() {
    if [[ -z "$1$GERRIT_ENDPOINT" ]]
    then
        _gerrit_usage
        return 1
    fi
    if [[ ! "$1" =~ ^[a-z0-9:\._-]+$ ]]
    then
        echo -e "Invalid \$GERRIT_ENDPOINT: $1\n" >&2
        _gerrit_usage
        return 2
    fi
    if [[ ! "$1" =~ : ]]
    then
        echo -e "Port not specified in \$GERRIT_ENDPOINT: $1\n" >&2
        _gerrit_usage
        return 3
    fi
    GERRIT_ENDPOINT="$1"
}
_gerrit_usage() {
    echo -e '$GERRIT_ENDPOINT not set. You may specify it via the first argument:\n\tgerrit server.tld:29418' >&2
    return 1
}
