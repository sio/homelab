#
# Invoke by adding `source aliases` to ~/.bashrc
#


# Improved file listing
alias ls='LC_COLLATE=C ls -F -h \
                          -v \
                          --color=auto \
                          --group-directories-first \
                          --show-control-chars'  # also applies to later aliases
alias la='ls -A'
alias ll='ls -l'


# Colored grep whenever possible
alias grep='grep --color=auto'


# Strip comments from file and print it to stdout
alias bones="grep -Ev '^\s*#|^\s*$'"


# Pretty print files to stdout, add filename headers
alias show="tail -v -n+0"


# Enable 256 color palette in Tmux
alias tmux="TERM=screen-256color tmux"


# Show file listing when changing current directory
_cd_with_listing() {
    local CMD="builtin cd"
    local DEST
    if [[ "$1" == "--" ]]
    then
        shift
    fi
    if [ "$#" -eq 0 ]
    then
        set -- "$HOME"  # set default argument value for function
    else
        if [ -f "$@" ]  # if target is a file instead of directory, cd its parent dir
        then
            DEST=$(dirname "$@")
            set -- "$DEST"
        fi
    fi
    $CMD -- "$@" && ls
}
alias cd=_cd_with_listing
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
pushd() {
    builtin pushd "$@" && ls
}
popd() {
    builtin popd "$@" && ls
}


# Pretty diff like `git diff`
_diff_pretty() {
    command diff --color=always "$@" | less -rXF
}
alias diff=_diff_pretty


# Make directory and cd into it
mkcd() {
    [ ! -d "$1" ] && mkdir -p -- "$1"
    cd -- "$1"
}


# Touch file and create required parent directories
# https://stackoverflow.com/a/19288855/3275560
mktouch() {
    local f
    for f in "$@"; do
        mkdir -p -- "$(dirname -- "$f")"
        touch -- "$f"
    done
}


# Manipulate multiple git repos
gitall() {
    if [ "_$1" == "_clone" ]
    then
        _gitallclone "${@:2}"
    else
        _gitall "$@"
    fi
}
_gitall() {
    # Run the same git subcommand in all git repos down the tree from current
    # directory

    local DIR
    local FIRST=1

    if [[ -z "$@" ]]
    then
        set -- "status" "-sb" # default subcommand when invoked without arguments
    fi

    find -type d -name .git -print0 2>/dev/null | while read -d $'\0' DIR
    do
        if [[ "$FIRST" -eq 0 ]]
        then
            echo -ne "\n\n"
        else
            FIRST=0
        fi
        command ls --color=auto -d "${DIR::(-4)}"
        git -C "$DIR/.." "$@"
    done
}
_gitallclone() {
    # Clone multiple git repositories (primarily for backup and archiving
    # purposes)
    #
    # Files with lists of URLs have to be supplied as arguments. Each list is
    # cloned to a corresponding directory.
    local FILE LIST DIR URL
    for FILE in "${@}"
    do
        echo -e "\n---\n\nSTART CLONING REPOS FROM LIST: $FILE\n"
        LIST=$(basename "$FILE")
        DIR="${LIST%.*}"  # without extension

        grep -Ev '^\s*#|^\s*$' "$FILE" | while read URL
        do
            [ -d "$DIR" ] || mkdir "$DIR"
            pushd "$DIR" > /dev/null
            git clone "$URL" || true
            echo
            popd > /dev/null
        done
        echo -e "FINISHED CLONING REPOS FROM LIST: $FILE"
    done
}


# Set terminal title from shell
# https://stackoverflow.com/a/1687708
title() {
    echo -ne '\033k'"$@"'\033\\'
    echo -ne '\033]2;'"$@"'\007'
    echo ''
}


# Cross-platform file opener
start() {
    local TARGET
    for TARGET in "${@}"
    do
        case "$OSTYPE" in
            msys*)
                # Windows doesn't like slashes in path, we work around that by
                # changing into the directory first and opening the file from
                # within.
                pushd "$(dirname "$TARGET")" >/dev/null
                command start "$(basename "$TARGET")"
                popd >/dev/null
                ;;
            *)
                xdg-open "$TARGET"
                ;;
        esac
    done
}


# Cross-platform clipboard
clip() {
    local clipboard=""
    which clip  &>/dev/null && clipboard="command clip"
    which xclip &>/dev/null && clipboard="xclip -selection clipboard"
    [[ -z "$clipboard" ]] && { echo No clipboard manager detected >&2; return 1; }

    $clipboard
}


# Do not clutter asciicasts with nesting levels
alias asciinema='_NESTED_LEVEL=0 asciinema'


# Tree implementation (for Msys on Windows and any OS that's missing it)
#
# Only -a and -d keys are supported. Shortcuts (-ad, -da) are not supported
tree() {
    if which tree &>/dev/null
    then
        command tree "$@"
    else
        local arg args search

        arg=""
        args=()
        search=( ! -path \*/\.\* )  # array of extra arguments for `find`

        for arg in "$@"  # this loop may clear default search options
        do
            if [[ "$arg" == "-a" ]]
            then
                search=()
            else
                args+=("$arg")
            fi
        done

        arg=""
        for arg in "${args[@]}"  # this loop only adds search options
        do
            if [[ "$arg" == "-d" ]]
            then
                search+=( -type d )
                arg=""
            fi
        done

        [[ ! -z "$arg" ]] && pushd "$arg" >/dev/null  # use last argument as directory name
        find ./ "${search[@]}" -print \
            | sed -e 's;[^/]*/;`----;g;s;`*----`;  ;g;s; ----; `----;g;s;\(`----*\)\([^-]\);\1 \2;g' \
            | tail -n+2
        [[ ! -z "$arg" ]] && popd >/dev/null
    fi
    return 0
}


# Seamless integration with per-app Python virtual environments
_app_venv_aliases() {
    local storage="$HOME/bin/app.venv"
    local app
    local venv
    for venv in "$storage"/*/bin
    do
        app="${venv::-4}"  # Remove bin suffix
        app="${app##*/}"   # Dirname from path
        if [[ -s "$storage/$app/bin/$app" ]]
        then
            alias "$app"="$storage/$app/bin/$app"  # Unix-like systems
        elif [[ -s "$storage/$app/Scripts/$app.exe" ]]
        then
            alias "$app"="$storage/$app/Scripts/$app.exe"  # Windows
        fi
    done
}
_app_venv_aliases


# Use tabs in vim by default
alias vim='vim -p'


# Shell commands popularity stats
cli-stats() {
    local output_len="$1"
    [[ -z "$output_len" ]] && output_len=10
    local hist_len
    hist_len=$(wc -l "$HISTFILE"|cut -d\  -f1)
    echo -e "TOP $output_len FREQUENTLY USED COMMANDS\n(out of $hist_len history entries)"
    sed 's:|: :g' "$HISTFILE"|awk '{print $1}'|sort|uniq -c|sort -rn|head -n "$output_len"
}


# Expand tabs to 4 spaces in all files with given extensions
retab() {
    local extension
    local filename
    local tempfile=$(mktemp '.retab_XXXXXX')
    for extension
    do
        echo "Expanding tabs and removing trailing whitespace in $extension files:"
        find . \
            -type f \
            -iname '*.'"$extension" \
            -print0 | \
        while read -d $'\0' filename
        do
            expand -i -t 4 "$filename" > "$tempfile" && mv "$tempfile" "$filename"
            sed -i 's/[[:blank:]]*$//' "$filename"
            echo "  $filename"
        done
    done
    rm "$tempfile" 2>/dev/null || true
}


# Patient ssh for reboots <https://old.reddit.com/r/linuxadmin/comments/o2rw19/w/h27y2pd/>
#   ConnectTimeout=1800 didn't work for some reason
ssh-wait() {
    until ssh "$@"
    do
        sleep 1
    done
}


# Limit key lifetime in ssh-agent to 12 hours by default
alias ssh-add='ssh-add -t $((12*60*60))'


# Set git-identity in mailmap/git-shortlog format:
#   $ git-identity "Vitaly Potyarkin <sio.wtf@gmail.com>"
#
# https://szymonkrajewski.pl/avoid-using-global-git-identity
git-identity() {
    local fullid
    fullid="$@"

    local name
    name="${fullid% <*}"

    local email
    email="${fullid##* <}"
    email="${email%%>*}"

    if [[ -z "$name" || -z "$email" || $fullid != *'<'*'>'* ]]
    then
        echo "Invalid identity string: $fullid" >&2
        return 1
    fi

    set -x
    git config --local user.name "$name"
    git config --local user.email "$email"
    { set +x; } 2>/dev/null
}

# Record terminal output to log file
record() {
    local output
    output="$1.script"
    local timing
    timing="$1.time"
    [[ -z "$1" ]] && {
        echo "Destination file not specified" >&2
        return 1
    }
    [[ -f "$output" ]] && {
        echo "Destination file exists: $output" >&2
        return 1
    }
    script --timing="$timing" --append --flush "$output"
}

# Show command when using watchexec
run() {
    local bold="$(tput bold)"
    local color="$(tput setaf 6)"
    local normal="$(tput sgr0)"
    local cleanup="                  "
    watchexec \
        --shell="$SHELL" \
        --debounce 500 \
        --ignore .git \
        --ignore index \
        --ignore index.lock \
        -- \
        "echo -e \"${cleanup}${color}${bold}\n$ $@${normal}\"; $@ && echo -ne \"${color}OK${normal}\\r\""
}
