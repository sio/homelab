#
# Build a pretty prompt for bash
#
# To invoke add `source prompt` to your ~/.bashrc
#


_color() {
    # Build colored prompt components with proper escape sequences
    #
    # Usage:
    #     color code text
    # code
    #     Color code, e.g. "1;34m"
    # text
    #     String to be colored
    #
    # ASCII colors (foreground: 30-37, background: 40-47)
    #   0: black,   1: red,       2: green,    3: yellow,
    #   4: blue,    5: magenta,   6: cyan,     7: white
    #
    # Note: \[ and \] are important for shell to properly calculate
    # length of the prompt. Otherwise there might be some garbage
    # left after some interactive operations, e.g. reverse-history-search.

    local start='\[\033['
    local end='\]'
    local revert='\[\033[0m\]'

    local color="$1"
    local value="$2"
    if [ ! -z "$value" ]
    then
        echo -n "$start$color$end$value$revert"
    fi
}


_prompt_usercolor() {
    # Return a color code for each user
    #
    # Generated from username and hostname, always red for root

    local user=$(id -u -n)
    if [ "x$user" = "xroot" ]
    then
        local color=1
    else
        local host=$(hostname)
        local color=$(_prompt_colorhash "$user@$host")
    fi
    echo -n $color
}


_prompt_colorhash() {
    # Reduce a string to a color code. Black, white and red
    # are considered reserved and are never returned.
    #
    # Usage:
    #   _prompt_colorhash text

    # Colors have been handpicked from 256 color palette to enable equal
    # representation of each color in case of downgrading to 8 color palette
    # (17 entries for each color, only 14 for cyan because there weren't any more)
    local colors+=(2 10 28 29 34 35 36 40 41 42 43 46 47 48 49 50 190)              # green
    local colors+=(3 11 58 100 101 142 143 144 184 185 186 187 226 227 228 229 230) # yellow
    local colors+=(4 12 54 55 56 57 60 61 62 63 67 68 69 74 75 21 27)               # blue
    local colors+=(5 13 53 90 96 127 133 139 164 170 176 182 201 207 213 219 225)   # magenta
    local colors+=(6 14 23 30 37 44 66 73 80 109 116 123 159 152   )                # cyan

    # Simple integer hash for input string
    local hash=$(echo "$*" | sum -r | cut -d\  -f1)

    # Select one of predefined colors according to calculated hash value
    local select=$(($hash % ${#colors[@]}))
    echo -n 8:5:${colors[$select]}
}


_prompt_git_branch() {
    local branch=$(git branch 2>/dev/null)
    [ ! -z "$branch" ] && branch=$(echo "$branch"|grep -E '^\* '|cut -d\  -f2-| xargs)
    [ ! -z "$branch" ] && echo -n " ($branch)"
}


_prompt_exit_code() {
    local exit="$?"
    if [ ! "$exit" -eq 0 ]
    then
        echo -ne "Exit code: $exit\n\r"
    fi
}


_prompt_nested_level() {
    if [ "$_NESTED_LEVEL" -gt 1 ]
    then
        echo -ne " ($_NESTED_LEVEL)"
    fi
}


_prompt_jobs() {
    if [[ -n "$(jobs -p)" ]]
    then
        printf " (&)"
    fi
}


_prompt_path() {
    local max_length=50
    local truncate_placeholder="â€¦"

    local path="$PWD"
    if [[ "${#path}" -gt 1 ]]
    then
        path="$path/"
    fi

    if [[ "${#path}" -gt "$max_length" ]]
    then
        local truncate=$(( ${#path} - $max_length + ${#truncate_placeholder} ))
        path="$truncate_placeholder${path:truncate:max_length}"
    fi

    printf " $path"
}


_prompt() {
    if [[ -z "$_OVERRIDE_PROMPT_COLOR" ]]
    then
        local usrclr="$(_prompt_usercolor)"
    else
        local usrclr="$_OVERRIDE_PROMPT_COLOR"
    fi
    if [[ "$usrclr" == "2" ]]  # handle color collision between host and path in PS1
    then
        local pathclr=6
    else
        local pathclr=2
    fi

    local newlines='\n\n'
    local who=$(_color "1;3${usrclr}m" '[\u@\h]')
    local path=$(_color "3${pathclr}m" '`_prompt_path`')
    local bang=$(_color "1;3${usrclr}m" '\$ ')
    local gitbranch=$(_color "33m" '`_prompt_git_branch`')
    local exitcode=$(_color "31m" '`_prompt_exit_code`')
    local level=$(_color '34m' "$(_prompt_nested_level)")
    local jobs=$(_color "35m" '`_prompt_jobs`')
    echo -n "$exitcode$newlines$who$path$gitbranch$level$jobs\n$bang"
}


_prompt_calculate_nested_level() {
    local parent="$(ps -p $PPID)"
    parent="${parent##* }"  # select last field of output table
    parent="${parent##*/}"  # select basename of the executable
    if [[ "$parent" =~ .*sh$ \
       || "$parent" == "make" \
       || "$PPID" == '1' ]]
    then
        # Increment only for sessions started by another shell,
        # PPID=1 is a special case for detached processes fathered by Make
        _NESTED_LEVEL=$(($_NESTED_LEVEL+1))
    else
        _NESTED_LEVEL=1
    fi
    export _NESTED_LEVEL
}
_prompt_calculate_nested_level


PS1=$(_prompt)
