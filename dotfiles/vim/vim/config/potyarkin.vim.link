"
"
" My configuration goes below
"
"

" Indent with spaces
set tabstop=4      " show tabs as 4 spaces
set shiftwidth=4   " when indenting with > use spaces
set expandtab      " insert spaces on Tab keypress
set softtabstop=4  " backspace deletes 4 spaces if present
autocmd Filetype make setlocal noexpandtab " Makefile requires Tab indentation

" Do not wrap long lines by default
set nowrap

" Wrap lines automatically for Markdown files
au FileType markdown setlocal textwidth=78 wrap

" yaml indentation
au FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Do not write trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Automatically continue comment blocks
set formatoptions+=cro

" Highlight search matches (use :noh or :nohlsearch to clear marks)
set hlsearch

" Comfortable search
set ignorecase
set smartcase
set scrolloff=5
set incsearch

" Smart Home key
" http://vim.wikia.com/wiki/Smart_home
function! SmartHome()
  let first_nonblank = match(getline('.'), '\S') + 1
  if first_nonblank == 0
    return col('.') + 1 >= col('$') ? '0' : '^'
  endif
  if col('.') == first_nonblank
    return '0'  " if at first nonblank, go to start line
  endif
  return &wrap && wincol() > 1 ? 'g^' : '^'
endfunction
noremap <expr> <silent> <Home> SmartHome()
imap <silent> <Home> <C-O><Home>

" Familiar arrow behavior when line wrapping is enabled
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Break lines by words instead of characters
set linebreak

" Deal with russian keymap in normal mode
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

" The following lines require changing layout with Ctrl-6. Inconvenient, but works.
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

" Enable syntax highlighting for Power Query
autocmd BufNewFile,BufRead *.pq set filetype=javascript
autocmd BufNewFile,BufRead *.m set filetype=javascript

" Enable cursor movement with mouse clicks
set mouse=a

" Use system clipboard by default
" (requires vim-gtk, use vim --version | grep clipboard to check for support)
"set clipboard=unnamedplus  " disabled because this causes issues with vim's usual copy-paste

" F2 toggles paste mode (to disable auto-indenting when copy-pasting code from system clibpboard)
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Enable indent folding, all folds are opened by default
set foldmethod=indent
set foldlevelstart=99

" Do not hide tabs if there are many of them
set tabpagemax=100

" Do not write any temp files
set nobackup
set nowritebackup
set noswapfile

" Join comments and indentation when joining lines.
" https://github.com/joshkel/dotfiles
if v:version >= 704
    set formatoptions+=j
end

" Fix syntax highlighting
" http://vim.wikia.com/wiki/Fix_syntax_highlighting
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

" Syntax highlighting for 1C files
"
" Language definition rules can be found in `syntax/` directory of
" https://github.com/andreevlex/vim-language-1c-bsl
autocmd BufNewFile,BufRead *.*Module.txt set syntax=bsl
function! Syntax1CToggle()
    if !exists("b:Syntax1CLangs")
        let b:Syntax1CLangs = ['bsl', 'sdbl', 'text']
    endif

    let current = index(b:Syntax1CLangs, &syntax)
    if current >= 0
        let target = b:Syntax1CLangs[(current+1) % len(b:Syntax1CLangs)]
    else
        if &syntax != ""
            call add(b:Syntax1CLangs, &syntax)
        endif
        let target = b:Syntax1CLangs[0]
    endif

    echo "Switching syntax from '" . &syntax . "' to '" . target . "'"
    let &syntax=target
endfunction
noremap <F1> <Esc>:call Syntax1CToggle()<CR>
inoremap <F1> <C-o>:call Syntax1CToggle()<CR>


" https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12735
set nomodeline
