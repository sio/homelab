" Makefile and Go require Tab indentation
au Filetype make,go setlocal noexpandtab

" Wrap lines automatically for Markdown files
au FileType markdown setlocal textwidth=78 wrap

" Narrow indentation
au FileType html,js,css,htmldjango,xml,yaml,terraform,tf setlocal
    \ tabstop=2
    \ shiftwidth=2
    \ softtabstop=2

" HTML syntax highlighting
au BufNewFile,BufRead *.htm,*html setlocal filetype=htmldjango

" Syntax highlighting for Power Query
au BufNewFile,BufRead *.pq set filetype=javascript
au BufNewFile,BufRead *.m set filetype=javascript

" Correct syntax highlighting for dotfiles
"   Filename patterns are not processed in any way, so we must use exec
au BufNewFile,BufRead *.link,*.copy,*.attach,*.j2,*.template
    \ exec "doautocmd BufRead " . expand("<afile>:r")

" E-mail messages
au BufRead */.claws-mail/tmp/* set filetype=mail
au BufRead *.mbox:2* set filetype=mail

" Fix syntax highlighting (http://vim.wikia.com/wiki/Fix_syntax_highlighting)
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

" Syntax highlighting for 1C files
"   Language definition rules can be found in `syntax/` directory of
"   https://github.com/andreevlex/vim-language-1c-bsl
au BufNewFile,BufRead *.*Module.txt set syntax=bsl
function! Syntax1CToggle()
    if !exists("b:Syntax1CLangs")
        let b:Syntax1CLangs = ['bsl', 'sdbl', 'text']
    endif

    let current = index(b:Syntax1CLangs, &syntax)
    if current >= 0
        let target = b:Syntax1CLangs[(current+1) % len(b:Syntax1CLangs)]
    else
        if &syntax != ""
            call add(b:Syntax1CLangs, &syntax)
        endif
        let target = b:Syntax1CLangs[0]
    endif

    echo "Switching syntax from '" . &syntax . "' to '" . target . "'"
    let &syntax=target
endfunction
noremap <F1> <Esc>:call Syntax1CToggle()<CR>
inoremap <F1> <C-o>:call Syntax1CToggle()<CR>
